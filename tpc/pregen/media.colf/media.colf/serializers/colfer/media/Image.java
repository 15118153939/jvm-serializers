package serializers.colfer.media;


// This file was generated by colf(1); DO NOT EDIT


import static java.lang.String.format;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import javax.xml.bind.TypeConstraintException;
import javax.xml.bind.DataBindingException;


/**
 * Data bean with built-in serialization support.
 * @author generated by colf(1)
 * @see <a href="https://github.com/pascaldekloe/colfer">Colfer's home</a>
 */
public class Image implements java.io.Serializable {

	/** The upper limit for serial byte sizes. */
	public static int colferSizeMax = 16 * 1024 * 1024;

	/** The upper limit for the number of elements in a list. */
	public static int colferListMax = 64 * 1024;

	private static final java.nio.charset.Charset _utf8 = java.nio.charset.Charset.forName("UTF-8");

	public String uri = "";
	public String title = "";
	public int width;
	public int height;
	public boolean small;
	public boolean large;


	/**
	 * Serializes the object.
	 * @param buf the data destination.
	 * @param offset the first byte index.
	 * @return the index of the first byte after the last byte written.
	 * @throws BufferOverflowException when {@code buf} is too small.
	 * @throws IllegalStateException on an upper limit breach defined by either {@link #colferSizeMax} or {@link #colferListMax}.
	 */
	public int marshal(byte[] buf, int offset) {
		int i = offset;
		try {

			if (! this.uri.isEmpty()) {
				buf[i++] = (byte) 0;
				String s = this.uri;
				int sLength = s.length();

				int start = ++i;
				for (int sIndex = 0; sIndex < sLength; sIndex++) {
					char c = s.charAt(sIndex);
					if (c < 128) {
						buf[i++] = (byte) c;
					} else if (c < 2048) {
						buf[i++] = (byte) (192 | c >>> 6);
						buf[i++] = (byte) (128 | c & 63);
					} else if (! Character.isSurrogate(c)) {
						buf[i++] = (byte) (224 | c >>> 12);
						buf[i++] = (byte) (128 | c >>> 6 & 63);
						buf[i++] = (byte) (128 | c & 63);
					} else if (++sIndex != sLength) {
						int cp = Character.toCodePoint(c, s.charAt(sIndex));
						buf[i++] = (byte) (240 | cp >>> 18);
						buf[i++] = (byte) (128 | cp >>> 12 & 63);
						buf[i++] = (byte) (128 | cp >>> 6 & 63);
						buf[i++] = (byte) (128 | cp & 63);
					}
				}

				int size = i - start;
				if (size > colferSizeMax)
					throw new IllegalStateException(format("colfer: field serializers/colfer/media.image.uri size %d exceeds %d UTF-8 bytes", size, colferSizeMax));

				int shift = 0;
				for (int x = size; (x & ~((1 << 7) - 1)) != 0; x >>>= 7) shift++;
				if (shift != 0) System.arraycopy(buf, start, buf, start + shift, size);
				i = start + shift + size;

				start--;
				while ((size & ~((1 << 7) - 1)) != 0) {
					buf[start++] = (byte) (size | 0x80);
					size >>>= 7;
				}
				buf[start++] = (byte) size;
			}

			if (! this.title.isEmpty()) {
				buf[i++] = (byte) 1;
				String s = this.title;
				int sLength = s.length();

				int start = ++i;
				for (int sIndex = 0; sIndex < sLength; sIndex++) {
					char c = s.charAt(sIndex);
					if (c < 128) {
						buf[i++] = (byte) c;
					} else if (c < 2048) {
						buf[i++] = (byte) (192 | c >>> 6);
						buf[i++] = (byte) (128 | c & 63);
					} else if (! Character.isSurrogate(c)) {
						buf[i++] = (byte) (224 | c >>> 12);
						buf[i++] = (byte) (128 | c >>> 6 & 63);
						buf[i++] = (byte) (128 | c & 63);
					} else if (++sIndex != sLength) {
						int cp = Character.toCodePoint(c, s.charAt(sIndex));
						buf[i++] = (byte) (240 | cp >>> 18);
						buf[i++] = (byte) (128 | cp >>> 12 & 63);
						buf[i++] = (byte) (128 | cp >>> 6 & 63);
						buf[i++] = (byte) (128 | cp & 63);
					}
				}

				int size = i - start;
				if (size > colferSizeMax)
					throw new IllegalStateException(format("colfer: field serializers/colfer/media.image.title size %d exceeds %d UTF-8 bytes", size, colferSizeMax));

				int shift = 0;
				for (int x = size; (x & ~((1 << 7) - 1)) != 0; x >>>= 7) shift++;
				if (shift != 0) System.arraycopy(buf, start, buf, start + shift, size);
				i = start + shift + size;

				start--;
				while ((size & ~((1 << 7) - 1)) != 0) {
					buf[start++] = (byte) (size | 0x80);
					size >>>= 7;
				}
				buf[start++] = (byte) size;
			}

			if (this.width != 0) {
				int x = this.width;
				if (x < 0) {
					x = -x;
					buf[i++] = (byte) (2 | 0x80);
				} else
					buf[i++] = (byte) 2;
				while ((x & ~((1 << 7) - 1)) != 0) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;
			}

			if (this.height != 0) {
				int x = this.height;
				if (x < 0) {
					x = -x;
					buf[i++] = (byte) (3 | 0x80);
				} else
					buf[i++] = (byte) 3;
				while ((x & ~((1 << 7) - 1)) != 0) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;
			}

			if (this.small) {
				buf[i++] = (byte) 4;
			}

			if (this.large) {
				buf[i++] = (byte) 5;
			}

			buf[i++] = (byte) 0x7f;
			return i;
		} catch (IndexOutOfBoundsException e) {
			if (i - offset > colferSizeMax)
				throw new IllegalStateException(format("colfer: serial exceeds %d bytes", colferSizeMax));
			if (i >= buf.length)
				throw new BufferOverflowException();
			throw new RuntimeException("colfer: bug", e);
		}
	}

	/**
	 * Deserializes the object.
	 * @param buf the data source.
	 * @param offset the first byte index.
	 * @return the index of the first byte after the last byte read.
	 * @throws BufferUnderflowException when {@code buf} is incomplete. (EOF)
	 * @throws TypeConstraintException on an upper limit breach defined by either {@link #colferSizeMax} or {@link #colferListMax}.
	 * @throws DataBindingException when the data does not match this object's schema.
	 */
	public int unmarshal(byte[] buf, int offset)
	throws BufferUnderflowException, TypeConstraintException, DataBindingException {
		int i = offset;
		try {
			byte header = buf[i++];

			if (header == (byte) 0) {
				int n = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					n |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (n > colferSizeMax)
					throw new TypeConstraintException(format("colfer: field serializers/colfer/media.image.uri size %d exceeds %d UTF-8 bytes", n, colferSizeMax));
				this.uri = new String(buf, i, n, this._utf8);
				i += n;
				header = buf[i++];
			}

			if (header == (byte) 1) {
				int n = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					n |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (n > colferSizeMax)
					throw new TypeConstraintException(format("colfer: field serializers/colfer/media.image.title size %d exceeds %d UTF-8 bytes", n, colferSizeMax));
				this.title = new String(buf, i, n, this._utf8);
				i += n;
				header = buf[i++];
			}

			if (header == (byte) 2) {
				int x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					x |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				this.width = x;
				header = buf[i++];
			} else if (header == (byte) (2 | 0x80)) {
				int x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					x |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				this.width = -x;
				header = buf[i++];
			}

			if (header == (byte) 3) {
				int x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					x |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				this.height = x;
				header = buf[i++];
			} else if (header == (byte) (3 | 0x80)) {
				int x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					x |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				this.height = -x;
				header = buf[i++];
			}

			if (header == (byte) 4) {
				this.small = true;
				header = buf[i++];
			}

			if (header == (byte) 5) {
				this.large = true;
				header = buf[i++];
			}

			if (header != (byte) 0x7f)
				throw new DataBindingException(format("colfer: unknown header at byte %d", i - 1), null);
		} catch (IndexOutOfBoundsException e) {
			if (i - offset > colferSizeMax)
				throw new TypeConstraintException(format("colfer: serial exceeds %d bytes", colferSizeMax));
			if (i >= buf.length)
				throw new BufferUnderflowException();
			throw new RuntimeException("colfer: bug", e);
		}

		return i;
	}

	public String getUri() {
		return this.uri;
	}

	public void setUri(String value) {
		this.uri = value;
	}

	public String getTitle() {
		return this.title;
	}

	public void setTitle(String value) {
		this.title = value;
	}

	public int getWidth() {
		return this.width;
	}

	public void setWidth(int value) {
		this.width = value;
	}

	public int getHeight() {
		return this.height;
	}

	public void setHeight(int value) {
		this.height = value;
	}

	public boolean getSmall() {
		return this.small;
	}

	public void setSmall(boolean value) {
		this.small = value;
	}

	public boolean getLarge() {
		return this.large;
	}

	public void setLarge(boolean value) {
		this.large = value;
	}

	@Override
	public final int hashCode() {
		return java.util.Objects.hash(0x7f, uri, title, width, height, small, large);
	}

	@Override
	public final boolean equals(Object o) {
		return o instanceof Image && equals((Image) o);
	}

	public final boolean equals(Image o) {
		return o != null
			&& java.util.Objects.equals(this.uri, o.uri)
			&& java.util.Objects.equals(this.title, o.title)
			&& this.width == o.width
			&& this.height == o.height
			&& this.small == o.small
			&& this.large == o.large;
	}

}
